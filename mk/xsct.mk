# Copyright 2021 Raphaël Bresson
XSCT_SCRIPTS_DIR   = ${PWD}/script/xsct
XSCT_FOLDER        = ${BUILD_DIR}/xsct
XSCT_WS            = ${XSCT_FOLDER}/workspace
XSCT_FREE_RTOS_WS  = ${XSCT_FOLDER}/freertos_workspace
BAREMETAL_PLATFORM = pfm_baremetal
FREE_RTOS_PLATFORM = pfm_freertos

PS_STACK_SIZE ?= 0x2000
PS_HEAP_SIZE  ?= 0x2000

${XSCT_FOLDER}:
	@mkdir -p $@

${XSCT_WS}: | ${XSCT_FOLDER}
	@mkdir -p $@

${XSCT_FOLDER}/device-tree-xlnx: | ${XSCT_WS}
	@echo "### INFO: Cloning Xilinx device-tree repository in directory ${PWD}/$@"
	@cd ${XSCT_FOLDER} && git clone https://github.com/Xilinx/device-tree-xlnx -b xilinx_v2022.2

${XSCT_FOLDER}/dts/system-top.dts: ${BUILD_DIR}/vivado/system.xsa | ${XSCT_FOLDER}/device-tree-xlnx
	@echo "-------------------------------------------"
	@echo "---   BOOT FILES GENERATION FOR LINUX   ---"
	@echo "-------------------------------------------"
	@xsct ${XSCT_SCRIPTS_DIR}/hsi.tcl "${BUILD_DIR}" "${SOC_FAMILY}" "${XSCT_BOARD}"

${XSCT_FOLDER}/hsi-out/dts/system-top.dts: ${XSCT_FOLDER}/dts/system-top.dts | ${XSCT_FOLDER}
	@echo "### INFO: Copying and patching files generated by XSCT for Linux boot"
	@mkdir -p ${XSCT_FOLDER}/hsi-out/dts
	@touch ${XSCT_FOLDER}/hsi-out/dts/pl.dtsi
	@find ${XSCT_FOLDER}/dts/ -name "*.dtsi" -exec cp {} ${XSCT_FOLDER}/hsi-out/dts/ \;
	@find ${XSCT_FOLDER}/dts/ -name "*.h"    -exec cp {} ${XSCT_FOLDER}/hsi-out/dts/ \;
	@find ${XSCT_FOLDER}/dts/ -name "*.dts"  -exec cp {} ${XSCT_FOLDER}/hsi-out/dts/ \;
	@find ${XSCT_FOLDER}/dts/ -name "*.bit"  -exec cp {} ${XSCT_FOLDER}/hsi-out/dts/ \;
	@sed -i '/\/ {/i #include "system-user.dtsi"' ${XSCT_FOLDER}/hsi-out/dts/system-top.dts
	@cp ${XSCT_FOLDER}/fsbl/executable.elf ${XSCT_FOLDER}/hsi-out/fsbl.elf
	@if [ "${SOC_FAMILY}" == "zynqmp" ]; then \
	  for f in `find ${XSCT_FOLDER}/hsi-out/dts/ -name "*.dts*"`; do \
			echo "### INFO: Patching $${f}"; \
	    sed -i 's+include/dt-bindings/dma/++g'     $${f}; \
	    sed -i 's+include/dt-bindings/gpio/++g'    $${f}; \
	    sed -i 's+include/dt-bindings/power/++g'   $${f}; \
	    sed -i 's+include/dt-bindings/reset/++g'   $${f}; \
	    sed -i 's+include/dt-bindings/clock/++g'   $${f}; \
	    sed -i 's+include/dt-bindings/phy/++g'     $${f}; \
	    sed -i 's+include/dt-bindings/pinctrl/++g' $${f}; \
	    sed -i 's+include/dt-bindings/input/++g'   $${f}; \
	  done; \
	  cp ${XSCT_FOLDER}/fsbl/zynqmp_fsbl_bsp/psu_cortexa53_0/libsrc/xilpm_v4_1/src/pm_cfg_obj.c ${XSCT_FOLDER}/hsi-out/pm_cfg_obj.c; \
	  cp ${XSCT_FOLDER}/fsbl/zynqmp_fsbl_bsp/psu_cortexa53_0/libsrc/xilpm_v4_1/src/pm_cfg_obj.h ${XSCT_FOLDER}/hsi-out/pm_cfg_obj.h; \
	  sed -i '/^#define PM_CONFIG_OBJECT_TYPE_BASE/d' ${XSCT_FOLDER}/hsi-out/pm_cfg_obj.c; \
	  sed -i 's/PM_CONFIG_OBJECT_TYPE_BASE/0x1U/g'    ${XSCT_FOLDER}/hsi-out/pm_cfg_obj.c; \
	  cp ${XSCT_FOLDER}/pmufw/executable.elf ${XSCT_FOLDER}/hsi-out/pmufw.elf; \
	  cp ${BUILD_DIR}/vivado/psu_init.c ${XSCT_FOLDER}/hsi-out/psu_init_gpl.c; \
	  cp ${BUILD_DIR}/vivado/psu_init.h ${XSCT_FOLDER}/hsi-out/psu_init_gpl.h; \
	  sed -i 's+psu_init.h+psu_init_gpl.h+g' ${XSCT_FOLDER}/hsi-out/psu_init_gpl.c; \
	else \
	  cp ${BUILD_DIR}/vivado/ps7_init_gpl.c ${XSCT_FOLDER}/hsi-out/ps7_init_gpl.c; \
	  cp ${BUILD_DIR}/vivado/ps7_init_gpl.h ${XSCT_FOLDER}/hsi-out/ps7_init_gpl.h; \
	fi

buildroot/board/${BR2_BOARD}/dts/system-top.dts: ${XSCT_FOLDER}/hsi-out/dts/system-top.dts
	@cp -r ${XSCT_FOLDER}/hsi-out/* ${PWD}/buildroot/board/${BR2_BOARD}/
	@cp ${BUILD_DIR}/vivado/bitstream.bit  ${PWD}/buildroot/board/${BR2_BOARD}/fpga.bit

.PHONY: sys-update
sys-update: buildroot/board/${BR2_BOARD}/dts/system-top.dts

### ------------------------------------------------------------------------------------------

BARE_METAL_C = $(shell find baremetal/ -name "*.c")
BARE_METAL_H = $(shell find baremetal/ -name "*.h")

${XSCT_WS}/${BAREMETAL_PLATFORM}/platform.spr: ${BUILD_DIR}/vivado/system.xsa
	@echo "-------------------------------------------"
	@echo "---    BAREMETAL PLATFORM GENERATION    ---"
	@echo "-------------------------------------------"
	@echo "### INFO: Generating baremetal platform"
	@xsct ${XSCT_SCRIPTS_DIR}/baremetal_platform.tcl "${BUILD_DIR}" "${SOC_FAMILY}"
	@echo "### INFO: Baremetal platform successfully generated"

.PHONY: baremetal-clean
baremetal-clean:
	@echo "### INFO: Cleaning baremetal workspace"
	@rm -rf ${XSCT_WS}

${XSCT_FOLDER}/bm-verify-${BM_PROJECT}.done: | ${XSCT_WS}
	@if [[ "${BM_PROJECT}" == *[!\ ]* ]]; then \
		if [[ "$(shell find baremetal/ -name ${BM_PROJECT})" == *[!\ ]* ]]; then \
			echo "done" > ${XSCT_FOLDER}/bm-verify-${BM_PROJECT}.done \
			echo "### INFO: Found baremetal project: baremetal/${BM_PROJECT}"; \
		else \
			echo "### ERROR: Project ${BM_PROJECT} not found in \"baremetal/\" directory"; \
			exit -1; \
		fi \
	else \
		echo "### ERROR: BM_PROJECT argument containing the name of baremetal project is mandatory for all baremetal-* targets"; \
		echo "### USAGE: make baremetal-<target> BM_PROJECT=<name of your project>"; \
		echo "### EXEMPLE: BUILD: make baremetal-build BM_PROJECT=helloworld"; \
		echo "### EXEMPLE: RUN: make baremetal-run BM_PROJECT=helloworld"; \
		echo "### EXEMPLE: DEBUG: make baremetal-debug BM_PROJECT=helloworld"; \
		echo "### INFO: Any baremetal project must be placed in \"baremetal\" directory"; \
		exit -1; \
	fi

${XSCT_WS}/${BM_PROJECT}/Debug/${BM_PROJECT}.elf: ${XSCT_WS}/${BAREMETAL_PLATFORM}/platform.spr ${XSCT_FOLDER}/bm-verify-${BM_PROJECT}.done ${BARE_METAL_C} ${BARE_METAL_H}
	@echo "----------------------------------------------------------------"
	@echo "---           BAREMETAL APPLICATION COMPILATION              ---"
	@echo "----------------------------------------------------------------"
	@if [ ! -d ${XSCT_WS}/${BM_PROJECT} ]; then \
		echo "### INFO: Generating application project ${BM_PROJECT}"; \
	  xsct -nodisp ${XSCT_SCRIPTS_DIR}/baremetal_application.tcl ${BUILD_DIR} ${BM_PROJECT} ${PWD}/baremetal/${BM_PROJECT}/src 1 ${PS_STACK_SIZE} ${PS_HEAP_SIZE}; \
	else \
		echo "### INFO: Updating application project ${BM_PROJECT}"; \
	  xsct -nodisp ${XSCT_SCRIPTS_DIR}/baremetal_application.tcl ${BUILD_DIR} ${BM_PROJECT} ${PWD}/baremetal/${BM_PROJECT}/src 0 ${PS_STACK_SIZE} ${PS_HEAP_SIZE}; \
	fi
	@echo "### INFO: Built executable: ${XSCT_WS}/${BM_PROJECT}/Debug/${BM_PROJECT}.elf"

.PHONY: baremetal-build
baremetal-build: ${XSCT_WS}/${BM_PROJECT}/Debug/${BM_PROJECT}.elf

.PHONY: baremetal-rebuild
baremetal-rebuild: ${XSCT_WS}/${FREE_RTOS_PLATFORM}/platform.spr ${XSCT_FOLDER}/freertos-verify-${FREE_RTOS_PROJECT}.done
	@echo "----------------------------------------------------------------"
	@echo "---          BAREMETAL APPLICATION FORCE REBUILD             ---"
	@echo "----------------------------------------------------------------"
	@if [ ! -d ${XSCT_WS}/${BM_PROJECT} ]; then \
		echo "### INFO: Generating application project ${BM_PROJECT}"; \
	  xsct -nodisp ${XSCT_SCRIPTS_DIR}/baremetal_application.tcl ${BUILD_DIR} ${BM_PROJECT} ${PWD}/baremetal/${BM_PROJECT}/src 1 ${PS_STACK_SIZE} ${PS_HEAP_SIZE}; \
	else \
		echo "### INFO: Updating application project ${BM_PROJECT}"; \
	  xsct -nodisp ${XSCT_SCRIPTS_DIR}/baremetal_application.tcl ${BUILD_DIR} ${BM_PROJECT} ${PWD}/baremetal/${BM_PROJECT}/src 0 ${PS_STACK_SIZE} ${PS_HEAP_SIZE}; \
	fi
	@echo "### INFO: Built executable: ${XSCT_WS}/${BM_PROJECT}/Debug/${BM_PROJECT}.elf"

.PHONY: baremetal-run
baremetal-run: baremetal-build
	@echo "----------------------------------------------------------------"
	@echo "---                BAREMETAL APPLICATION RUN                 ---"
	@echo "----------------------------------------------------------------"
	@echo "### INFO: Running baremetal project ${BM_PROJECT}"
	@xsct -nodisp ${XSCT_SCRIPTS_DIR}/boot.tcl "${BUILD_DIR}" "${SOC_FAMILY}" "baremetal" "${XSCT_WS}/${BM_PROJECT}/Debug/${BM_PROJECT}.elf" "0" "${NVERBOSE}"
	@echo "### INFO: baremetal project ${BM_PROJECT} run successfully finished"

.PHONY: baremetal-debug
baremetal-debug: baremetal-build
	@echo "----------------------------------------------------------------"
	@echo "---               BAREMETAL APPLICATION DEBUG                ---"
	@echo "----------------------------------------------------------------"
	@echo "### INFO: Debugging baremetal project ${BM_PROJECT}"
	@xsct -nodisp -interactive ${XSCT_SCRIPTS_DIR}/boot.tcl "${BUILD_DIR}" "${SOC_FAMILY}" "baremetal" "${XSCT_WS}/${BM_PROJECT}/Debug/${BM_PROJECT}.elf" "1" "${NVERBOSE}"
	@echo "### INFO: baremetal project ${BM_PROJECT} debug session successfully finished"

### ------------------------------------------------------------------------------------------

FREE_RTOS_C = $(shell find baremetal/ -name "*.c")
FREE_RTOS_H = $(shell find baremetal/ -name "*.h")

${XSCT_FREE_RTOS_WS}/${FREE_RTOS_PLATFORM}/platform.spr: ${BUILD_DIR}/vivado/system.xsa ${XSCT_FOLDER}/dts/system-top.dts
	@echo "-------------------------------------------"
	@echo "---    FREE RTOS PLATFORM GENERATION    ---"
	@echo "-------------------------------------------"
	@echo "### INFO: Generating FreeRTOS platform"
	@xsct ${XSCT_SCRIPTS_DIR}/freertos_platform.tcl "${BUILD_DIR}" "${SOC_FAMILY}"
	@echo "### INFO: FreeRTOS platform successfully generated"

.PHONY: freertos-clean
freertos-clean:
	@echo "### INFO: Cleaning FreeRTOS workspace"
	@rm -rf ${XSCT_FREE_RTOS_WS}

${XSCT_FOLDER}/freertos-verify-${FREE_RTOS_PROJECT}.done: | ${XSCT_FREE_RTOS_WS}
	@if [[ "${FREE_RTOS_PROJECT}" == *[!\ ]* ]]; then \
		if [[ "$(shell find freertos/ -name ${FREE_RTOS_PROJECT})" == *[!\ ]* ]]; then \
			echo "done" > $@ \
			echo "### INFO: Found FreeRTOS project: baremetal/${BM_PROJECT}"; \
		else \
			echo "### ERROR: Project ${FREE_RTOS_PROJECT} not found in \"freertos/\" directory"; \
			exit -1; \
		fi \
	else \
		echo "### ERROR: FREE_RTOS_PROJECT argument containing the name of FreeRTOS project is mandatory for all freertos-* targets (Except for freertos-clean)"; \
		echo "### USAGE: make freertos-<target> FREE_RTOS_PROJECT=<name of your project>"; \
		echo "### EXEMPLE: BUILD: freertos-build FREE_RTOS_PROJECT=freertos-helloworld"; \
		echo "### EXEMPLE: RUN: make freertos-run FREE_RTOS_PROJECT=freertos-helloworld"; \
		echo "### EXEMPLE: DEBUG: make freertos-debug FREE_RTOS_PROJECT=freertos-helloworld"; \
		echo "### INFO: Any FreeRTOS project must be placed in \"freertos\" directory"; \
		exit -1; \
	fi

${XSCT_FREE_RTOS_WS}/${FREE_RTOS_PROJECT}/Debug/${FREE_RTOS_PROJECT}.elf: ${XSCT_FREE_RTOS_WS}/${FREE_RTOS_PLATFORM}/platform.spr ${XSCT_FOLDER}/freertos-verify-${FREE_RTOS_PROJECT}.done ${FREE_RTOS_C} ${FREE_RTOS_H}
	@echo "----------------------------------------------------------------"
	@echo "---           FREE RTOS APPLICATION COMPILATION              ---"
	@echo "----------------------------------------------------------------"
	@if [ ! -d ${XSCT_FREE_RTOS_WS}/${FREE_RTOS_PROJECT} ]; then \
		echo "### INFO: Generating application project ${FREE_RTOS_PROJECT}"; \
	  xsct -nodisp ${XSCT_SCRIPTS_DIR}/freertos_application.tcl ${BUILD_DIR} ${FREE_RTOS_PROJECT} ${PWD}/freertos/${FREE_RTOS_PROJECT}/src 1 ${PS_STACK_SIZE} ${PS_HEAP_SIZE}; \
	else \
		echo "### INFO: Updating application project ${FREE_RTOS_PROJECT}"; \
	  xsct -nodisp ${XSCT_SCRIPTS_DIR}/freertos_application.tcl ${BUILD_DIR} ${FREE_RTOS_PROJECT} ${PWD}/freertos/${FREE_RTOS_PROJECT}/src 0 ${PS_STACK_SIZE} ${PS_HEAP_SIZE}; \
	fi
	@echo "### INFO: Built executable: $@"

.PHONY: freertos-build
freertos-build: ${XSCT_FREE_RTOS_WS}/${FREE_RTOS_PROJECT}/Debug/${FREE_RTOS_PROJECT}.elf

.PHONY: freertos-rebuild
freertos-rebuild: ${XSCT_FREE_RTOS_WS}/${FREE_RTOS_PLATFORM}/platform.spr ${XSCT_FOLDER}/freertos-verify-${FREE_RTOS_PROJECT}.done
	@echo "----------------------------------------------------------------"
	@echo "---          FREE RTOS APPLICATION FORCE REBUILD             ---"
	@echo "----------------------------------------------------------------"
	@if [ ! -d ${XSCT_FREE_RTOS_WS}/${FREE_RTOS_PROJECT} ]; then \
		echo "### INFO: Generating application project ${FREE_RTOS_PROJECT}"; \
	  xsct -nodisp ${XSCT_SCRIPTS_DIR}/freertos_application.tcl ${BUILD_DIR} ${FREE_RTOS_PROJECT} ${PWD}/freertos/${FREE_RTOS_PROJECT}/src 1 ${PS_STACK_SIZE} ${PS_HEAP_SIZE}; \
	else \
		echo "### INFO: Updating application project ${FREE_RTOS_PROJECT}"; \
	  xsct -nodisp ${XSCT_SCRIPTS_DIR}/freertos_application.tcl ${BUILD_DIR} ${FREE_RTOS_PROJECT} ${PWD}/freertos/${FREE_RTOS_PROJECT}/src 0 ${PS_STACK_SIZE} ${PS_HEAP_SIZE}; \
	fi
	@echo "### INFO: Built executable: ${XSCT_FREE_RTOS_WS}/${FREE_RTOS_PROJECT}/Debug/${FREE_RTOS_PROJECT}.elf"


.PHONY: freertos-run
freertos-run: freertos-build
	@echo "----------------------------------------------------------------"
	@echo "---                FREE RTOS APPLICATION RUN                 ---"
	@echo "----------------------------------------------------------------"
	@echo "### INFO: Running FreeRTOS project ${BM_PROJECT}"
	@xsct -nodisp ${XSCT_SCRIPTS_DIR}/boot.tcl "${BUILD_DIR}" "${SOC_FAMILY}" "freertos" "${XSCT_FREE_RTOS_WS}/${FREE_RTOS_PROJECT}/Debug/${FREE_RTOS_PROJECT}.elf" "0" "${NVERBOSE}"
	@echo "### INFO: FreeRTOS project ${FREE_RTOS_PROJECT} run successfully finished"

.PHONY: freertos-debug
freertos-debug: freertos-build
	@echo "----------------------------------------------------------------"
	@echo "---               FREE RTOS APPLICATION DEBUG                ---"
	@echo "----------------------------------------------------------------"
	@echo "### INFO: Debugging FreeRTOS project ${BM_PROJECT}"
	@xsct -nodisp -interactive ${XSCT_SCRIPTS_DIR}/boot.tcl "${BUILD_DIR}" "${SOC_FAMILY}" "freertos" "${XSCT_FREE_RTOS_WS}/${FREE_RTOS_PROJECT}/Debug/${FREE_RTOS_PROJECT}.elf" "1" "${NVERBOSE}"
	@echo "### INFO: FreeRTOS project ${FREE_RTOS_PROJECT} debug session successfully finished"

# ------------------------------

.PHONY: xsct-clean
xsct-clean: baremetal-clean freertos-clean
	@echo "### INFO: Cleaning xsct folder"
	@rm -rf build/xsct

.PHONY: vitis-baremetal
vitis-baremetal: ${XSCT_WS}/${BAREMETAL_PLATFORM}/platform.spr
	@vitis -workspace ${XSCT_WS} > /dev/null 2>&1

.PHONY: vitis-freertos
vitis-freertos: ${XSCT_WS}/${FREE_RTOS_PLATFORM}/platform.spr
	@vitis -workspace ${XSCT_FREE_RTOS_WS} > /dev/null 2>&1

.PHONY: jtag-boot-buildroot
jtag-boot-buildroot: buildroot-cpio-build
	@echo "----------------------------------------------------------------"
	@echo "---      BUILDROOT GNU/LINUX DISTRIBUTION BOOT FROM JTAG     ---"
	@echo "----------------------------------------------------------------"
	@xsct ${XSCT_SCRIPTS_DIR}/boot.tcl "${BUILD_DIR}" "${SOC_FAMILY}" "linux" "${NVERBOSE}"
	@echo "### INFO: Linux boot successfully done"

